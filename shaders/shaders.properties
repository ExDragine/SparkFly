#shaders/shaders.properties
#Minecraft Settings
oldLighting=false
underwaterOverlay = false
sun=false
moon=true
stars=false
vignette=false
dynamicHandLight=true


#Get the correct alpha value : S_A*(1-DST_A)+DST_A
blend.gbuffers_hand=SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_DST_ALPHA ONE
blend.gbuffers_terrain=off
blend.gbuffers_water= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_DST_ALPHA ONE
blend.gbuffers_hand_water= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_DST_ALPHA ONE
blend.gbuffers_textured= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_DST_ALPHA ONE
blend.gbuffers_textured_lit= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_DST_ALPHA ONE
blend.gbuffers_weather= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_DST_ALPHA ONE
blend.gbuffers_entities= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_DST_ALPHA ONE
blend.gbuffers_block= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_DST_ALPHA ONE
blend.gbuffers_damagedblock= SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_DST_ALPHA ONE

scale.composite11=0.52
scale.composite12=0.25
scale.composite15=0.5
scale.deferred7=0.25
scale.deferred=0.26
scale.deferred2=0.25
sliders=EXPOSURE_MULTIPLIER MIN_LIGHT_AMOUNT TORCH_R TORCH_G TORCH_B TORCH_AMOUNT shadowMapResolution sunPathRotation SKY_BRIGHTNESS_DAY SKY_BRIGHTNESS_NIGHT BLEND_FACTOR FLICKER_REDUCTION MOTION_REJECTION VL_SAMPLES Exposure_Speed POM_MAP_RES POM_DEPTH MAX_ITERATIONS MAX_DIST SSR_STEPS ambientOcclusionLevel SEA_LEVEL ATMOSPHERIC_DENSITY SKY_COLOR_R SKY_COLOR_G SKY_COLOR_B SKY_COLOR_STRENGTH SKY_COLOR_R_STRENGTH SKY_COLOR_G_STRENGTH SKY_COLOR_B_STRENGTH CLOUD_COLOR_R CLOUD_COLOR_G CLOUD_COLOR_B CLOUD_COLOR_STRENGTH CLOUD_COLOR_R_STRENGTH CLOUD_COLOR_G_STRENGTH CLOUD_COLOR_B_STRENGTH CLOUD_GODRAYS_STHENGHT Bloom_STRENGTH WORLD_COLOR_R WORLD_COLOR_R_STRENGTH WORLD_COLOR_G WORLD_COLOR_G_STRENGTH WORLD_COLOR_B WORLD_COLOR_B_STRENGTH STAR_COLOR_R STAR_COLOR_R_STRENGTH STAR_COLOR_G STAR_COLOR_G_STRENGTH STAR_COLOR_B STAR_COLOR_B_STRENGTH STAR_COLOR_STRENGTH WAVE_HIGH
screen=[Atmospherics] [TAA_OPTIONS] [Lighting] [Shading] [Camera] [Color]

screen.Atmospherics=VOLUMETRIC_LIGHT SEA_LEVEL ATMOSPHERIC_DENSITY VL_SAMPLES

screen.TAA_OPTIONS= TAA <empty> BLEND_FACTOR BICUBIC_RESAMPLING FAST_BICUBIC MOTION_REJECTION FLICKER_REDUCTION CLOSEST_VELOCITY SMOOTHESTSTEP_INTERPOLATION NO_CLIP FAST_TAA

screen.Lighting= [Sky] [Ambient]
screen.Sky=SKY_BRIGHTNESS_DAY SKY_BRIGHTNESS_NIGHT CLOUD_GODRAYS_STHENGHT
screen.Ambient = MIN_LIGHT_AMOUNT SEPARATE_AO ambientOcclusionLevel Ambient_Mult

screen.Shading =   WAVY_PLANTS   [Shadows] [Reflections] [POM]
screen.Shadows = PCF VPS SCREENSPACE_CONTACT_SHADOWS shadowMapResolution
screen.Reflections = SCREENSPACE_REFLECTIONS FULL_RES_DEPTH_BUFFER SSR_STEPS
screen.POM = POM_MAP_RES POM POM_DEPTH MAX_ITERATIONS MAX_DIST USE_LUMINANCE_AS_HEIGHTMAP LUMINANCE_MAX
screen.Camera = TONEMAP_ACES EXPOSURE_MULTIPLIER Exposure_Speed Bloom_STRENGTH

screen.Color= [Main] [Atmospheric_Physics] [Cloud] [Torch] [Star]
screen.Main =  WORLD_COLOR_R WORLD_COLOR_R_STRENGTH WORLD_COLOR_G WORLD_COLOR_G_STRENGTH WORLD_COLOR_B WORLD_COLOR_B_STRENGTH
screen.Atmospheric_Physics= SKY_COLOR_STRENGTH <empty> SKY_COLOR_R_STRENGTH SKY_COLOR_R SKY_COLOR_G SKY_COLOR_G_STRENGTH SKY_COLOR_B SKY_COLOR_B_STRENGTH
screen.Cloud= CLOUD_COLOR_STRENGTH <empty> CLOUD_COLOR_R CLOUD_COLOR_R_STRENGTH CLOUD_COLOR_G CLOUD_COLOR_G_STRENGTH CLOUD_COLOR_B CLOUD_COLOR_B_STRENGTH
screen.Torch = TORCH_R TORCH_G TORCH_B TORCH_AMOUNT
screen.Star = STAR_COLOR_R STAR_COLOR_R_STRENGTH STAR_COLOR_G STAR_COLOR_G_STRENGTH STAR_COLOR_B STAR_COLOR_B_STRENGTH STAR_COLOR_STRENGTH


texture.noise=texture/YJsDz.png

separateAo=true

alphaTest.gbuffers_water=off
alphaTest.gbuffers_weather=off
alphaTest.gbuffers_armor_glint=off
beacon.beam.depth=true
rain.depth=false

variable.float.texelSizeX = 1.0/viewWidth
variable.float.texelSizeY = 1.0/viewHeight
uniform.vec2.texelSize=vec2(texelSizeX,texelSizeY)

uniform.int.framemod8 = frameCounter%8

variable.float.normSunVec = sqrt(sunPosition.x*sunPosition.x+sunPosition.y*sunPosition.y+sunPosition.z*sunPosition.z)
variable.float.normUpVec = sqrt(upPosition.x*upPosition.x+upPosition.y*upPosition.y+upPosition.z*upPosition.z)

variable.float.sunPosX = sunPosition.x/normSunVec
variable.float.sunPosY = sunPosition.y/normSunVec
variable.float.sunPosZ = sunPosition.z/normSunVec

uniform.vec3.sunVec=vec3(sunPosX,sunPosY,sunPosZ)

variable.float.upPosX = upPosition.x/normUpVec
variable.float.upPosY = upPosition.y/normUpVec
variable.float.upPosZ = upPosition.z/normUpVec

uniform.vec3.upVec=vec3(upPosX,upPosY,upPosZ)
uniform.float.sunElevation = sunPosX*upPosX+sunPosY*upPosY+sunPosZ*upPosZ


variable.float.angSun= -(( pi * 0.5128205128205128 - acos(sunElevation*1.065-0.065))/1.5)
variable.float.angMoon= -(( pi * 0.5128205128205128 - acos(-sunElevation*1.065-0.065))/1.5)
variable.float.angSky= -(( pi * 0.5128205128205128 - acos(sunElevation*0.95+0.05))/1.5)
variable.float.angSkyNight= -(( pi * 0.5128205128205128 -acos(-sunElevation*0.95+0.05))/1.5)

uniform.float.sunIntensity=max(0.,1.0-exp(angSun))
uniform.float.skyIntensity=max(0.,1.0-exp(angSky))*clamp(sunElevation+0.095,0.0,0.08)/0.08*clamp(sunElevation+0.095,0.0,0.08)/0.08
uniform.float.moonIntensity=max(0.,1.0-exp(angMoon))
uniform.float.skyIntensityNight=max(0.,1.0-exp(angSkyNight))

variable.float.sunAmount = 16.
variable.float.ambientAmount = 1.2

variable.float.modWT = (worldTime%24000)*1.0

variable.float.fogAmount0 = 1/1000.+ 1/180.*(clamp(modWT-11000.,0.,2000.0)/2000.+(1.0-clamp(modWT,0.,3000.0)/3000.))*(clamp(modWT-11000.,0.,2000.0)/2000.+(1.0-clamp(modWT,0.,3000.0)/3000.)) + 1/200.*clamp(modWT-13000.,0.,1000.0)/1000.*(1.0-clamp(modWT-23000.,0.,1000.0)/1000.)
uniform.float.VFAmount = fogAmount0*fogAmount0+1/10000.*rainStrength
uniform.float.fogAmount = fogAmount0+1/70.*rainStrength + 1/50.*clamp(modWT-13000.,0.,1000.0)/1000.*(1.0-clamp(modWT-23000.,0.,1000.0)/1000.)

variable.float.sunlightR0=1.0
variable.float.sunlightG0=(0.41+pow(max(0.0,sunElevation-0.2),0.4)*0.5)*(1.0-rainStrength*0.8) + rainStrength*0.8
variable.float.sunlightB0=(0.17+pow(max(0.0,sunElevation-0.2),0.6)*0.65)*(1.0-rainStrength*0.8) + rainStrength*0.8

variable.float.sunlightR=sunlightR0/(sunlightR0+sunlightG0+sunlightB0)
variable.float.sunlightG=sunlightG0/(sunlightR0+sunlightG0+sunlightB0)
variable.float.sunlightB=sunlightB0/(sunlightR0+sunlightG0+sunlightB0)
uniform.vec3.nsunColor=vec3(sunlightR,sunlightG,sunlightB)
uniform.vec3.sunColor=vec3(sunlightR*3.*sunAmount*(1.0-rainStrength*0.95),sunlightG*3.*sunAmount*(1.0-rainStrength*0.95),sunlightB*3.*sunAmount*(1.0-rainStrength*0.95))

variable.float.lightSign = clamp(sunIntensity*pow(10.,35.),0.,1.)
uniform.vec4.lightCol=vec4(sunlightR*3.*sunAmount*(1.0-rainStrength*0.95)*sunIntensity+(0.07/15.-0.07/15.*lightSign)*(1.0-rainStrength*0.95),sunlightG*3.*sunAmount*(1.0-rainStrength*0.95)*sunIntensity+(0.12/15.-0.12/15.*lightSign)*(1.0-rainStrength*0.95),sunlightB*3.*sunAmount*(1.0-rainStrength*0.95)*sunIntensity+(0.18/15.-0.18/15.*lightSign)*(1.0-rainStrength*0.95),lightSign*2.0-1.0)


